<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>me.hqqich.aria2</groupId>
  <artifactId>aria2-api</artifactId>
  <version>1.0.3</version>

  <properties>
    <java.version>1.8</java.version>
    <maven.compiler.source>17</maven.compiler.source>
    <jackson.version>2.14.2</jackson.version>
    <maven.compiler.target>17</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <okhttp.version>4.12.0</okhttp.version>
    <lombok.version>1.18.30</lombok.version>

    <junit.platform.version>1.10.2</junit.platform.version>
    <junit.jupiter.version>5.10.2</junit.jupiter.version>

    <logback.version>1.5.3</logback.version>
    <slf4j.version>2.0.9</slf4j.version>

    <kotlin.version>1.9.0</kotlin.version>
  </properties>


  <dependencies>

    <!-- https://mvnrepository.com/artifact/org.jetbrains.kotlin/kotlin-stdlib -->
    <dependency>
      <groupId>org.jetbrains.kotlin</groupId>
      <artifactId>kotlin-stdlib</artifactId>
      <version>${kotlin.version}</version>
    </dependency>

    <dependency>
      <groupId>com.squareup.okhttp3</groupId>
      <artifactId>okhttp</artifactId>
      <version>${okhttp.version}</version>
    </dependency>

    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>${lombok.version}</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-jsr310</artifactId>
      <version>${jackson.version}</version>
    </dependency>


    <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>${junit.jupiter.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${junit.jupiter.version}</version>
      <scope>test</scope>
    </dependency>
    <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <version>${junit.jupiter.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-params</artifactId>
      <version>${junit.jupiter.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.junit.platform</groupId>
      <artifactId>junit-platform-runner</artifactId>
      <version>${junit.platform.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- ===绑定到logger=== -->
    <!-- 日志门面 -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>${slf4j.version}</version>
    </dependency>

    <!-- 日志实现,范围设置为test -->
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>${logback.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-core</artifactId>
      <version>${logback.version}</version>
      <scope>test</scope>
    </dependency>
    <!-- ===END=== -->

  </dependencies>

  <!-- 发布到本地路径 -->
  <distributionManagement>
    <repository>
      <id>local-repo-release</id>
      <name>GitHub Release</name>
      <url>file://${project.basedir}/maven-repo</url>
    </repository>
  </distributionManagement>

  <build>
    <plugins>
      <!-- 编译插件 -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.10.1</version>
        <configuration>
          <source>8</source>
          <target>8</target>
        </configuration>
      </plugin>
      <!-- 生成源码的插件 -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <version>3.2.1</version>
        <executions>
          <execution>
            <id>attach-sources</id>
            <phase>package</phase>
            <goals>
              <goal>jar-no-fork</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- kotlin编译插件，必须要有，不然无法编译 -->
      <plugin>
        <groupId>org.jetbrains.kotlin</groupId>
        <artifactId>kotlin-maven-plugin</artifactId>
        <version>${kotlin.version}</version>
        <executions>
          <execution>
            <id>compile</id>
            <phase>process-sources</phase>
            <goals>
              <goal>compile</goal>
            </goals>
            <configuration>
              <sourceDirs>
                <source>src/main/java</source>
                <source>src/main/kotlin</source>
                <source>target/generated-sources/annotations</source>
              </sourceDirs>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- 添加 build-helper-maven-plugin 插件 -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>3.2.0</version>
        <executions>
          <execution>
            <id>add-source</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <!-- 指定额外的源代码目录路径 -->
              <sources>
                <source>src/main/java</source>
                <source>src/main/kotlin</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>


<!--      &lt;!&ndash; 生成javadoc的插件 &ndash;&gt;
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>3.6.3</version>
        <configuration>
          &lt;!&ndash;指定编码为UTF-8&ndash;&gt;
          <encoding>UTF-8</encoding>
          <charset>UTF-8</charset>
          <docencoding>UTF-8</docencoding>
          &lt;!&ndash; 指定源代码目录 &ndash;&gt;
          <sourcepath>src/main/kotlin;src/main/java</sourcepath>
        </configuration>
        <executions>
          <execution>
            <id>generate-javadoc</id>
            &lt;!&ndash; 绑定javadoc插件到Maven的生命周期 &ndash;&gt;
            <phase>package</phase>
            &lt;!&ndash; 在生命周期后执行绑定的javadoc插件的goals &ndash;&gt;
            <goals>
              <goal>jar</goal>
            </goals>
            <configuration>
              <additionalJOption>-Xdoclint:none</additionalJOption>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.jetbrains.dokka</groupId>
        <artifactId>dokka-maven-plugin</artifactId>
        <version>${dokka.version}</version>
        <executions>
          <execution>
            <phase>pre-site</phase>
            <goals>
              <goal>dokka</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          &lt;!&ndash; Set to true to skip dokka task, default: false &ndash;&gt;
          <skip>false</skip>
          &lt;!&ndash; Default: ${project.artifactId} &ndash;&gt;
          <moduleName>data</moduleName>
          &lt;!&ndash; Default: ${project.basedir}/target/dokka &ndash;&gt;
          <outputDir>${project.build.directory}/kotlindocs</outputDir>
          &lt;!&ndash; Use default or set to custom path to cache directory to enable package-list caching. &ndash;&gt;
          &lt;!&ndash; When set to default, caches stored in $USER_HOME/.cache/dokka &ndash;&gt;
          <cacheRoot>default</cacheRoot>
          &lt;!&ndash; Used for linking to JDK, default: 6 &ndash;&gt;
          <jdkVersion>8</jdkVersion>
          &lt;!&ndash; Do not output deprecated members, applies globally, can be overridden by packageOptions &ndash;&gt;
          <skipDeprecated>false</skipDeprecated>
          &lt;!&ndash; Emit warnings about not documented members, applies globally, also can be overridden by packageOptions &ndash;&gt;
          <reportUndocumented>true</reportUndocumented>
          &lt;!&ndash; Do not create index pages for empty packages &ndash;&gt;
          <skipEmptyPackages>true</skipEmptyPackages>
          &lt;!&ndash; Short form list of sourceRoots, by default, set to ${project.compileSourceRoots} &ndash;&gt;
          <sourceDirectories>
            <dir>src/main/kotlin</dir>
          </sourceDirectories>
          <sourceRoots>
            <root>
              <path>src/main/kotlin</path>
              &lt;!&ndash; See platforms section of documentation &ndash;&gt;
              <platforms>JVM</platforms>
            </root>
          </sourceRoots>

        </configuration>
      </plugin>-->
    </plugins>
  </build>
</project>
